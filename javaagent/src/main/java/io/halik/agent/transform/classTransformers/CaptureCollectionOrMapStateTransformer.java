/*
 *   Copyright (C) 2016 Pawel Badenski
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package io.halik.agent.transform.classTransformers;

import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import io.halik.agent.transform.methodVisitors.CaptureCollectionModificationMethodVisitor;
import io.halik.agent.transform.methodVisitors.CaptureMapModificationMethodVisitor;
import io.halik.agent.transform.utils.CollectionsVerbosityLevel;
import io.halik.agent.transform.utils.ComputeCommonSuperClassWriter;
import org.objectweb.asm.*;
import org.objectweb.asm.util.CheckClassAdapter;

import java.io.*;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;
import java.util.List;

import static com.google.common.collect.Iterables.any;
import static io.halik.agent.BytecodeUtilitiesDumpingGround.decideFlagsForClassWriterBasedOnClassJavaVersion;
import static io.halik.agent.BytecodeUtilitiesDumpingGround.readClassMajorVersion;
import static io.halik.agent.transform.utils.ComputeCommonSuperClass.isInstanceOf;
import static io.halik.agent.transform.utils.ShouldTransformClass.*;

public class CaptureCollectionOrMapStateTransformer implements ClassFileTransformer {
    private final boolean debug;
    private CollectionsVerbosityLevel verbosityLevel = CollectionsVerbosityLevel.NORMAL;
    private List<String> include;
    private List<String> exclude;

    public CaptureCollectionOrMapStateTransformer(boolean debug, List<String> include, List<String> exclude) {
        this.debug = debug;
        this.include = include;
        this.exclude = exclude;
    }

    @Override
    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,
                            ProtectionDomain protectionDomain, byte[] classFileBuffer) throws IllegalClassFormatException {
        if (runningFromIntelliJWhichMightCauseStackOverflowError(className)
                || anyIntellijClass(className)
                || classBelongsToJavaAgent(className)
                || builtinJavaClass(className)
                || autoGeneratedClass(className)
                || disablePotentiallyExpensiveLibrariesUnlessExplicitlyEnabled(className)
                || !included(className)
                || isInstanceOf(className, "java/util/Collection")) {
            return classFileBuffer;
        }
        ClassReader reader = new ClassReader(classFileBuffer);
        ClassWriter writer =
                new ComputeCommonSuperClassWriter(
                        reader,
                        decideFlagsForClassWriterBasedOnClassJavaVersion(readClassMajorVersion(classFileBuffer)));
        ClassVisitor classVisitor = new DecoratingClassVisitor(writer, className);
        if (debug) {
            classVisitor = new CheckClassAdapter(classVisitor);
        }
        reader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
        return writer.toByteArray();
    }

    private boolean disablePotentiallyExpensiveLibrariesUnlessExplicitlyEnabled(String className) {
        return verbosityLevel.filtered(className) && !included(className);
    }

    private boolean included(String packageOrClassName) {
        return (any(include, Predicates.equalTo("*")) || any(include, startsWith(packageOrClassName)))
                && !any(exclude, startsWith(packageOrClassName));
    }

    private static Predicate<String> startsWith(final String className) {
        return new Predicate<String>() {
            @Override
            public boolean apply(String filter) {
                return className.startsWith(filter);
            }
        };
    }

    private void verifyClasses(ClassWriter writer) {
        try {
            CheckClassAdapter.verify(new ClassReader(writer.toByteArray()), false, new PrintWriter(System.out));
        } catch (Throwable e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    private static class DecoratingClassVisitor extends ClassVisitor {
        private String className;

        public DecoratingClassVisitor(ClassWriter writer, String className) {
            super(Opcodes.ASM5, writer);
            this.className = className;
        }


        @Override
        public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
            try {
                MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
                return new CaptureMapModificationMethodVisitor(
                        new CaptureCollectionModificationMethodVisitor(mv)
                );
            } catch (Exception e) {
                e.printStackTrace();
                throw new RuntimeException(e);
            }
        }
    }
}
