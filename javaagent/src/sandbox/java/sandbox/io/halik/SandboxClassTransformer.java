/*
 *   Copyright (C) 2016 Pawel Badenski
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package sandbox.io.halik;

import io.halik.agent.transform.utils.ComputeCommonSuperClassWriter;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;

import static io.halik.agent.BytecodeUtilitiesDumpingGround.*;
import static io.halik.agent.transform.utils.ShouldTransformClass.*;

public class SandboxClassTransformer implements ClassFileTransformer {
    @Override
    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classFileBuffer) throws IllegalClassFormatException {
        if (classLoaderIsNullWhichMightCauseNoClassDefFoundError(loader)
                || runningFromIntelliJWhichMightCauseStackOverflowError(className)
                || anyIntellijClass(className)
                || classBelongsToJavaAgent(className)
                || builtinJavaClass(className)
                || autoGeneratedClass(className)) {
            return classFileBuffer;
        }
        try {
            ClassReader reader = new ClassReader(classFileBuffer);
            ClassWriter writer =
                    new ComputeCommonSuperClassWriter(
                            reader,
                            decideFlagsForClassWriterBasedOnClassJavaVersion(readClassMajorVersion(classFileBuffer)));
            reader.accept(new SandboxClassVisitor(writer), ClassReader.EXPAND_FRAMES);
            if (false) {
                verifyClasses(writer);
            }
            return writer.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return classFileBuffer;
    }
}
