/*
 *   Copyright (C) 2016 Pawel Badenski
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package io.halik.agent.transform.classTransformers;

import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import io.halik.agent.capture.FlowFacade;
import io.halik.agent.transform.classVisitors.CaptureDeclarationsClassVisitor;
import io.halik.agent.transform.classVisitors.CaptureFlowAndStateClassVisitor;
import io.halik.agent.transform.utils.ComputeCommonSuperClassWriter;
import io.halik.agent.transform.utils.VerbosityLevel;
import org.objectweb.asm.*;
import org.objectweb.asm.util.CheckClassAdapter;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;
import java.util.ArrayList;
import java.util.List;

import static com.google.common.collect.Iterables.any;
import static io.halik.agent.BytecodeUtilitiesDumpingGround.*;
import static io.halik.agent.transform.utils.ShouldTransformClass.*;

public class CaptureFlowAndStateClassTransformer implements ClassFileTransformer {
    private final boolean debug;
    private VerbosityLevel verbosityLevel = VerbosityLevel.NORMAL;
    private List<String> include;
    private List<String> exclude;
    private int classIndex = 0;

    public CaptureFlowAndStateClassTransformer(boolean debug, List<String> include, List<String> exclude) {
        this.debug = debug;
        this.include = include;
        this.exclude = exclude;
    }

    public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined,
                            ProtectionDomain protectionDomain, byte[] classFileBuffer)
            throws IllegalClassFormatException {
        if (classLoaderIsNullWhichMightCauseNoClassDefFoundError(loader)
                || runningFromIntelliJWhichMightCauseStackOverflowError(className)
                || anyIntellijClass(className)
                || classBelongsToJavaAgent(className)
                || builtinJavaClass(className)
                || autoGeneratedClass(className)
                || !included(className)
                || verbosityLevel.filtered(className)) {
            return classFileBuffer;
        }

        try {
            new ClassReader(classFileBuffer.clone()).accept(
                    new CaptureDeclarationsClassVisitor(classIndex), 0);

            List<String> methodIndex = new ArrayList<>();
            ClassReader reader = new ClassReader(classFileBuffer);
            ClassWriter writer =
                    new ComputeCommonSuperClassWriter(
                            reader,
                            decideFlagsForClassWriterBasedOnClassJavaVersion(readClassMajorVersion(classFileBuffer)));
            ClassVisitor classVisitor = new CaptureFlowAndStateClassVisitor(writer, classIndex, methodIndex);

            if (debug) {
                classVisitor = new CheckClassAdapter(classVisitor);
            }
            reader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
            FlowFacade.captureClassName(className);
            FlowFacade.captureMethodNames(methodIndex);
            classIndex++;
            return writer.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (debug) {
            System.out.println(className + " transformed by CFAS transformer.");
        }
        return classFileBuffer;
    }

    private boolean included(String packageOrClassName) {
        return (any(include, Predicates.equalTo("*")) || any(include, startsWith(packageOrClassName)))
                && !any(exclude, startsWith(packageOrClassName));
    }

    private static Predicate<String> startsWith(final String className) {
        return new Predicate<String>() {
            @Override
            public boolean apply(String filter) {
                return className.startsWith(filter);
            }
        };
    }

}
